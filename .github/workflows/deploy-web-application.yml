name: Deploy Next.js Web Application to Firebase Hosting

on:
  push:
    branches:
      - main # Or your deployment branch
    paths:
      - 'web-application/**'
      - 'packages/shared-dtos/**' # Trigger if shared DTOs change
      - '.github/workflows/deploy-web-application.yml' # Trigger if workflow changes
      - 'pnpm-lock.yaml' # Trigger if lockfile changes
      - 'turbo.json' # Trigger if turbo config changes
      - 'package.json' # Root package.json
  workflow_dispatch: # Allows manual triggering

jobs:
  build_and_deploy_firebase_hosting:
    name: Build and Deploy Web App to Firebase Hosting
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # Required for Workload Identity Federation with GCP

    # No top-level working-directory, commands will run from repo root by default

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for Turborepo to correctly determine changed files

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: latest # Or specify a PNPM version

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm' # Configure caching for PNPM

      - name: Install Monorepo Dependencies
        run: pnpm install --frozen-lockfile

      # Turborepo Remote Caching (Optional but recommended for faster CI builds)
      # Configure these secrets in your GitHub repository settings
      # - TURBO_TOKEN: Your Turborepo Remote Cache token
      # - TURBO_TEAM: Your Turborepo team slug
      # - name: Configure Turborepo Remote Caching
      #   run: npx turbo login && npx turbo link
      #   env:
      #     TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      #     TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

      - name: Build Web Application with Turborepo
        # This command builds 'web-application' and any of its workspace dependencies (like shared-dtos)
        # Turborepo will use its cache if available.
        run: pnpm exec turbo run build --filter=web-application...

      - name: Authenticate to Google Cloud (for Firebase)
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}' # Ensure this secret is set
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL_FOR_FIREBASE }}' # Use a dedicated SA for Firebase deployment if possible

      - name: Deploy to Firebase Hosting
        # The firebase-tools CLI needs to be run in the context of the web-application
        # or configured to know where the build output and firebase.json are.
        # Firebase CLI with webframeworks support should detect Next.js output.
        working-directory: ./web-application # firebase.json is typically here
        run: |
          npx firebase-tools@latest deploy --only hosting --project ${{ secrets.GCP_PROJECT_ID }} --force
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks # Enable framework-aware CLI features
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Sometimes needed by firebase-tools for some integrations